<p>
    <b>More about the tools that Conformity Check provides and how they are realised</b>
</p>
<p>
    This website is designed and runs using the main technologies below:
</p>
<p>
    <b>Web Framework: </b>
</p>
<p>
    -	ASP.NET Core 5
</p>
<p>
    <b>Programming Languages:</b>
</p>
<p>
    -	Back-end: C#
</p>
<p>
    -	Front-end: JavaScript
</p>
<p>
    <b>IDE:</b>
</p>
<p>
    -	Visual Studio Enterprise 2019
</p>
<p>
    <b>Database:</b>
</p>
<p>
    -	MS SQL Server 2019
</p>
<p>
    -	MS SQL Server Management Studio 18
</p>
<p>
    <b>ORM:</b>
</p>
<p>
    -	Entity Framework Core 5
</p>
<p>
    <b>Markup Languages:</b>
</p>
<p>
    -	HTML5 /no external theme is used; custom pages html/
</p>
<p>
    -	CSS /all CSS styles are custom made; no external libraries are used/
</p>
<p>
    <b>External APIs:</b>
</p>
<p>
    -	SendGrid API
</p>
<p>
    -	Google ReCaptcha v. 3 – for login, register and contact forms
</p>
<p>
    -	Facebook authentication
</p>
<p>
    <b>Additional:</b>
</p>
<p>
    -	Nikolay Kostov’s ASP.NET Core Template: 
    <a href="https://github.com/NikolayIT/ASP.NET-Core-Template">https://github.com/NikolayIT/ASP.NET-Core-Template</a>
</p>
<p>
    -	AutoMapper
</p>
<p>
    -	AJAX
</p>
<p>
    -	jQuery
</p>
<p>
    -	All tables are with custom made pagination and sorting; no external libraries are used
</p>
<p>
    -	Moq
</p>
<p>
    -	xUnit
</p>
<p>
    -	MockQueryable.Moq
</p>
<p>
    - StyleCop Analyzers
</p>
<p>
    -	Font Awesome
</p>
<p>
    -	Json, CVS
</p>
<p>
    -	ASP.NET CORE Areas
</p>
<p>
    -	ASP.NET CORE Identity System - Scaffold identity
</p>
<p>
    -	Validation of user registration e-mail - sending confirmation e-mail to user on register and on e-mail change, resend e-mail confirmation
</p>
<p>
    -	Information for contact messages to admin and to contacted user - sending e-mails to both of them
</p>
<p>
    -	Forgotten password confirmation with validation token on e-mail
</p>
<p>
    -	Send requests to suppliers for missing conformities
</p>
<p>
    -	Partial Views
</p>
<p>
    -	Cookie consent
</p>
<p>
    -	Validation attributes + Custom validation attributes
</p>
<p>
    -	View components
</p>
<p>
    -	Local Storage
</p>
<p>
    -	Repository Pattern
</p>
<p>
    -	Dependency Injection
</p>
<p>
    -	Automatic data seeding on first application’s run
</p>
<p>
    -	Code first model approach
</p>
<p>
    -	Log in file - wwwroot/log/ConformityCheck.log
</p>
<p>
    -	Distributed Memory Cache - SQL Server:
</p>
<p>
    o	The logic is that the general view with report returned for all major entity types is generated by the order - last created one. In the cache we store with relative expiration time of 5 minutes all the records from the first page (12 records by default paging view model settings). If the user creates a new record, it will not be seen immediately, but this record will be findable be the search option available and by other sorting options except the default one! Conformity types are cached for 1 year because they are very few and rarely modified. Because the user expects to see immediately the new created ones, we update the cache after create, edit or delete of a conformity type. In the distributed cache we hold the Home/Index general counts collection for 5 minutes. In the Views we cache all view components for the general entities: all are kept for 2 minutes, just the conformity types are kept for 20 minutes since they are rarely modified. Time is relatively set.
</p>
<p class="large-margin-vertical">
    <b>Expect product, substances and regulatory lists - they are the next stage of the development..........</b>
</p>